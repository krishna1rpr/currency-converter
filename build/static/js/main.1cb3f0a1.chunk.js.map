{"version":3,"sources":["Converter.js","App.js","serviceWorker.js","index.js"],"names":["BASE_URL","Converter","state","currencies","base","amount","convertTo","result","date","handleSelect","e","setState","target","name","value","calculate","handleInput","isNaN","fetch","then","res","json","data","console","log","rates","toFixed","handleSwap","preventDefault","this","className","type","onChange","map","currency","key","disabled","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"uSAGMA,G,MAAQ,wFA+GCC,E,2MA1GXC,MAAO,CACHC,WAAY,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,OAChDC,KAAM,MACNC,OAAQ,GACRC,UAAW,MACXC,OAAQ,GACRC,KAAM,I,EAGVC,aAAe,SAACC,GAAO,IAAD,EAClB,EAAKC,UAAL,mBACMD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,OAD/B,uBAC8C,MAD9C,GAEI,EAAKC,Y,EAIbC,YAAc,SAACN,GACX,EAAKC,SAAS,CACVN,OAAQK,EAAEE,OAAOE,MACjBP,OAAQ,MAEZ,EAAKQ,Y,EAITA,UAAW,WACP,IAAMV,EAAS,EAAKH,MAAMG,OACvBA,IAAWY,OAGVC,MAAMlB,GAELmB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACFC,QAAQC,IAAIF,GACZ,IAAMd,EAAOc,EAAKd,KACZD,GAAWe,EAAKG,MAAM,EAAKvB,MAAMI,WAAaD,GAASiB,EAAKG,MAAM,EAAKvB,MAAME,MAAQC,IAASqB,QAAQ,GAC5G,EAAKf,SAAS,CACVJ,SAAQC,a,EAMxBmB,WAAY,SAACjB,GACT,IAAMN,EAAO,EAAKF,MAAME,KAClBE,EAAY,EAAKJ,MAAMI,UAC7BI,EAAEkB,iBACF,EAAKjB,SAAS,CACVL,UAAWF,EACXA,KAAME,EACNC,OAAQ,MAEZ,EAAKQ,Y,wEAIC,IAAD,EACuDc,KAAK3B,MAA1DC,EADF,EACEA,WAAYC,EADd,EACcA,KAAMC,EADpB,EACoBA,OAAQC,EAD5B,EAC4BA,UAAWC,EADvC,EACuCA,OAAQC,EAD/C,EAC+CA,KAEpD,OAEI,yBAAKsB,UAAU,kBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,kBACX,4BAAKzB,EAAL,IAAcD,EAAd,qBACA,4BAAgB,OAAXG,EAAkB,cAAgBA,EAAvC,IAAgDD,GAChD,oCAAUE,GAEV,yBAAKsB,UAAU,OACX,yBAAKA,UAAU,iCACP,0BAAMA,UAAU,oBACZ,2BAAOC,KAAK,SAASjB,MAAOT,EAAQ2B,SAAUH,KAAKb,YAAac,UAAU,sCAC1E,4BAAQjB,KAAK,OAAOC,MAAOV,EAAM4B,SAAWH,KAAKpB,aAAcqB,UAAU,gCAEpE3B,EAAW8B,KAAI,SAAAC,GAAQ,OACpB,4BAAQC,IAAOD,EAAUpB,MAASoB,GAAWA,QAKzD,0BAAMJ,UAAU,oBACZ,2BAAOM,UAAU,EAAMtB,MAAkB,OAAXP,EAAkB,cAAgBA,EAAQuB,UAAU,sCAClF,4BAAQjB,KAAK,YAAYC,MAAOR,EAAW0B,SAAWH,KAAKpB,aAAcqB,UAAU,gCAC1E3B,EAAW8B,KAAI,SAAAC,GAAQ,OACpB,4BAAQC,IAAKD,GAAWA,SAM5C,yBAAKJ,UAAU,gDACX,wBAAIO,QAASR,KAAKF,WAAYG,UAAU,QAAxC,0B,GAhGhBQ,aCQTC,MARf,WACI,OACE,yBAAKT,UAAU,OACb,kBAAC,EAAD,QCIYU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,a","file":"static/js/main.1cb3f0a1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Style.css';\r\n\r\nconst BASE_URL = `http://api.exchangeratesapi.io/v1/latest?access_key=c70802bff03dbfa658e19241561b4880`;\r\n\r\nclass Converter extends Component{\r\n\r\n    \r\n    state ={\r\n        currencies: ['USD', 'AUD', 'SGD', 'PHP', 'EUR', 'INR'],\r\n        base: 'EUR',\r\n        amount: '',\r\n        convertTo: 'USD',\r\n        result: '',\r\n        date: ''\r\n    }\r\n    \r\n    handleSelect = (e) => {\r\n        this.setState(\r\n            {[e.target.name]: e.target.value, result: null,},\r\n            this.calculate\r\n        );\r\n    };\r\n\r\n    handleInput = (e) => {\r\n        this.setState({\r\n            amount: e.target.value,\r\n            result: null\r\n        },\r\n        this.calculate\r\n        );\r\n    };\r\n\r\n    calculate =() => {\r\n        const amount = this.state.amount;\r\n        if(amount === isNaN) {\r\n            return\r\n        } else {\r\n            fetch(BASE_URL)\r\n            // fetch(`https://api.exchangeratesapi.io/latest?base=${this.state.base}`)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                console.log(data)\r\n                const date = data.date;\r\n                const result = ((data.rates[this.state.convertTo] * amount)/(data.rates[this.state.base] * amount)).toFixed(4);\r\n                this.setState({\r\n                    result, date\r\n                });\r\n            });           \r\n        }\r\n    }\r\n\r\n    handleSwap =(e) => {\r\n        const base = this.state.base\r\n        const convertTo = this.state.convertTo\r\n        e.preventDefault();\r\n        this.setState({\r\n            convertTo: base,\r\n            base: convertTo,\r\n            result: null\r\n        },\r\n        this.calculate\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const {currencies, base, amount, convertTo, result, date} = this.state\r\n\r\n        return(\r\n\r\n            <div className=\"container my-5\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-lg-6 mx-auto\">\r\n                        <div className=\"card card-body\">\r\n                            <h5>{amount} {base} is equivalent to</h5>\r\n                            <h2>{result === null ? 'Calculating' : result} {convertTo}</h2>\r\n                            <p>as of {date}</p>\r\n\r\n                            <div className=\"row\">\r\n                                <div className=\"col-lg-10 col-md-10 col-sm-10\">\r\n                                        <form className=\"form-inline mb-4\">\r\n                                            <input type=\"number\" value={amount} onChange={this.handleInput} className=\"form-control form-control-lg mx-3\"/>\r\n                                            <select name=\"base\" value={base} onChange ={this.handleSelect} className=\"form-control form-control-lg\">\r\n\r\n                                                {currencies.map(currency =>\r\n                                                    <option key = {currency} value = {currency}>{currency}</option>\r\n                                                )}\r\n                                            </select>\r\n                                        </form>\r\n\r\n                                        <form className=\"form-inline mb-4\">\r\n                                            <input disabled={true} value={result === null ? 'Calculating' : result} className=\"form-control form-control-lg mx-3\"/>\r\n                                            <select name=\"convertTo\" value={convertTo} onChange ={this.handleSelect} className=\"form-control form-control-lg\">\r\n                                                    {currencies.map(currency =>\r\n                                                        <option key={currency}>{currency}</option>\r\n                                                    )}\r\n                                            </select>\r\n                                        </form>\r\n                                    </div>\r\n\r\n                                    <div className=\"col-lg-2 col-md-2 col-sm-2 align-self-center\">\r\n                                        <h1 onClick={this.handleSwap} className=\"swap\">&#8595;&#8593;</h1>\r\n                                    </div>\r\n                                </div>\r\n                            </div> \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                \r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default Converter;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Converter from './Converter';\n\nfunction App() {\n    return (\n      <div className=\"App\">\n        <Converter />\n      </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}